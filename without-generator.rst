Understanding the module system (advanced)
==========================================

In some cases, the module maker included with giftcarder may not be enough, that may be the case if you're trying to parse json data for example.

So in addition to learning how to use the module maker, you can get a short crash-course on the python programming language as well as on the inner
workings of the GiftCarder CA module system.



Getting Started
---------------

A "little" example
~~~~~~~~~~~~~~~~~~

**To get us started with module making, let's use a simple example.**

Now we'll use the website Abuelos, Abuelos has a balance checker at the url: http://abuelos.alohaenterprise.com:8080/abuelos/abuelos_card_balance.jsp
And requests are sent as POST to the url http://abuelos.alohaenterprise.com:8080/abuelos/abuelos_card_balance_get.jsp

Now this website is let's say very primitive, and does not require a pin, captcha, cookie or token

Here's a commented sample module::

        # Example_module[No][No][No][No].py ([Has Pin][Has Captcha][Requires a Valid][Requires proxies])
        # coding: utf8

        #======================= IMPORT AREA =======================
        #here's where you import any module needed for the website
        from random import randint
        #===========================================================

        #====================== SETTINGS AREA ======================
        #here's where you declare the settings of the website such
        #as method, error key, success key, custom settings, etc...
        name = "Abuelos" #Name to show when loaded
        method = 'POST' #Method is either GET, POST or JSON
        valid = "12645000095506" #Valid giftcard for the module
        #Setting the valid to `None` will prompt the user to input theirs
        pin = False #Does the config has pin? True/False
        cookie = False #Does the config require Cookie Session? True/False
		#Setting cookie to True will require a cookie_scrapper(), cookie_request(), cookie_settings() defs
        token = False #Does the config require token? True/False
        #Setting token to True will require a token_scrapper() and token_request() def
        captcha = False #Does the congif require captcha solving? True/False
        site_key = None #The website captcha key
        error = ['{cardBalance:"0.00"}', 'Access Denied'] #If any of these keywords are found in the response of the request, it'll consider the card as invalid
        retries = 0 #Max retries limit
        timeout = 8 #Max timeout limit in seconds
        headers = None #Custom headers, None will use default

        #===========================================================

        #====================== DEFINITON AREA =====================
        #here's where the definitions are made.
        #There's 5 defs:
        #async def cardcode(): which gives the cardcode generating algorithm
        #async def pincode(): which gives the pincode generating algorithm
        #def request(): Which returns the url
        #async def scrapper(): This is used to scrap the value of the giftcards
        #                Leave it empty to save valid giftcards without their value
        #def settings(): returns the data to send in the GET request


        #====== GENERATING AREA ======
        async def cardcode(cardcode, n): #Code that generates the code
                for x in range(n): #No need to worry about this
                    cardcode += str(randint(0,9)) #here cardcode will be numerical only
                return cardcode

        async def pincode(pincode = ""):  #pattern if there's one, else put ""
                for x in range(4): #length of the pin to be generated (here it's 4)
                    pincode += str(randint(0,9)) #here pin is numerical
                return pincode

        #====== SETTINGS AREA ======
        def request(): #URL to send the requests to
                url = "http://abuelos.alohaenterprise.com:8080/abuelos/abuelos_card_balance_get.jsp"
                return url

        async def scrapper(response): #Code that fetches the value/balance of the card
                value = "$" + response[:-6][response.find("cardBalance") + 13:] #Python code to scrap only the card value from the request's response code
                return (value)

        def settings(cardcode, pincode, captcha, token): #Data to send at each request. cardcode, pincode, captcha and token are variables that are generated by the software
                data = {'cardNumber':cardcode} #POST data to send
                return (data)

        #===========================================================


Now you might be a bit confused at all of this, and that's totally fine, but don't worry by following the examples and guides for each area, you'll be up and making modules in no time! ;)



Import Area
-----------


What is it?
~~~~~~~~~~~

In the programming language Python, you can "import" bundled code to make your tasks easier. 

These bundles of code come in what's called a library, using the import statement, you can easily load the library's code without having to rewrite it yourself.

Some libraries can be native to Python such as the "random" library, but some others can be made by third-parties.


How do I use it?
~~~~~~~~~~~~~~~~

To import a library in your module, simply type the following in the import area::

        import example

This will import the library called "example". Now if the library example has a function "do_stuff()", you can now use it by typing::

        example.do_stuff()

****

To facilitate importing, you can also simply import a function from a library on it's own as such::

        from example import do_stuff
        #And now you can easily run the do_stuff function with specifying the example library by typing:
        do_stuff()

You may also import multiple functions from a same library::

        from example import do_stuff, do_things, do_something


What libraries can I import?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The software comes pre-included with every Python 3 native library, and thus you can import any one of them following your needs (more info here: https://docs.python.org/3/library/) (The most useful library you'll probably have to import is the "random" library)

But GiftCarder CA also includes 3 third party libraries to make your module making experience easier.
These modules are essentially for the scrapping of tokens and value:

- The lxml library (for XML and html scrapping with XPath support) (docs: https://lxml.de/index.html)

- The BeautifulSoup4 library (for html scrapping) (docs: https://www.crummy.com/software/BeautifulSoup/bs4/doc/)

- The ujson library (for fast json scrapping) (docs: https://pypi.org/project/ujson/) (this might replaced by rapidjson in the future)

- The re library (for regex scrapping) (docs: https://docs.python.org/3/library/re.html)
 
 
Since GiftCarder CA's module processor is based on Python, any other third party python library you'd like to use can be included by sending me a request on Discord/Telegram/Email



Setup Area
----------

Introduction
~~~~~~~~~~~~

The Setup area is the most essential place of your module, this is where you will set the different variables and options of your configs. 

Make sure you have **ALL** the different options present when making a config and that you follow each format correctly (cf: the example module in the Getting Started section), if an option isn't formatted correctly or is lacking, the software will return an error.


Name
~~~~

The first section is the name. This is the name that will be displayed when loading the module:

.. thumbnail:: https://b.catgirlsare.sexy/AmiC.png
    :align: center
    :alt: Displayed name

To write a name you must do so as such::

    name = "Name to be displayed"

Make sure the name is between apostrophes like such ``"Name"`` or ``'Name'``

Maker sure the name isn't over 78 characters or it will be automatically shrunk down.


Method
~~~~~~

How to know which one I want
____________________________

If you are not familiar with HTTP methods and Networking, when you send a request to a server, it will be setup in a certain way, usually either GET or POST, for more info on methods: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods

Now to find out what method the website is using when checking for balance, you must open the Network tool (CTRL+SHIFT+E on Firefox and Control+Shift+J on Chrome)

This should open up a tool like this (Firefox):

.. thumbnail:: https://b.catgirlsare.sexy/S_AM.png
    :align: center
    :alt: Network tool (Firefox)

Now simply try and check your card balance (usually by clicking a button after inputting a card number), and you should see some requests are being made to the website as such:

.. thumbnail:: https://b.catgirlsare.sexy/-8Ja.png
    :align: center
    :alt: Network tool (Firefox)

Here we can see that the browser is sending a **POST** request to the url https://buffalobrewpub.alohaenterprise.com/efMemberLinkLogin.do.

If you are unsure which request is the one that checks the card balance, simply head over to the "Params" tab and check if the card number you put is there or not:

.. thumbnail:: https://b.catgirlsare.sexy/wnZM.png
    :align: center
    :alt: Params tab

**JSON's case**

Now in the case of sending JSON data, it'll actually usually be displayed as a POST request in the Network tool. However you can find out if you're sending JSON data by heading over to the "Params" tab and looking at the type of data that is sent. If it displays the data as ``Form Data`` that means it's a regular POST request, however if it displays ``JSON`` that means it's sending JSON data, example:

.. thumbnail:: http://japan.u.catgirlsare.sexy/N4_m.png
    :align: center
    :alt: JSON data in a POST request example

How to set it in the module
___________________________

The method must be written as such::

     method = "GET"

The method can only be either ``"GET"``, ``"POST"`` or ``"JSON"`` (once again make sure it is written between apostrophes)


Valid
~~~~~

Often giftcard numbers aren't fully random but actually follow a pattern.

Here's an example of 5 valid giftcards for a merchant website::

     12645000021259 --- Value: $25.00
     12645000071777 --- Value: $25.00
     12645000020927 --- Value: $1.46
     12645000054130 --- Value: $0.02

As you might've noticed, here only the last 5 digits actually change with ``126450000`` being the pattern

If you happen to have a valid giftcard for your module, you can include it and the software will take care of randomizing a few digits of that giftcard.

To set up a valid you must do so by writing the following::

     valid = "12645000021259" #Always remember the apostrophes

Patterns can also be set to use Alphanumerical characters (letters and numbers) and can be set through regex with the re python library

**In the case you're making a module WITHOUT having a valid giftcard before hand/knowing the pattern**

When making modules, you have the option to let the user provide his own valid giftcard for generation instead of providing a pattern. To do so simply set the pattern to None as such::

     valid = None #None must be written with an uppercase 'N' and **NO** apostrophes this time

This will request the user to input his own valid giftcard upon loading your module.


Pin
~~~

This will set wether the card has a pin code or not. 

Pin codes (also called Security codes) are usually 3-4 digit numbers that you must enter seperately from the rest of the card. 

Example here:

.. image:: https://b.catgirlsare.sexy/5jhY.png
    :align: center
    :alt: Here the website requires a pincode

You must set the pin argument to either ``True`` or ``False`` (**WITHOUT** apostrophes) as such::

    pin = False


Cookie
~~~~~~

Cookies can sometimes be passed through requests to set up sessions and can be used as identification. 
While most websites don't usually require you to set up cookies in your requests, some more advanced websites might be using them.

You must set the cookie argument to either ``True`` or ``False`` (**WITHOUT** apostrophes) as such::

    cookie = False


Token
~~~~~

Tokens similarly to cookies are usually used to identify the legitimacy of a request.

They are usually a bunch of generated strings hidden in the page source code that is then sent as arguments in a request. 

These tokens will be different for each request and thus must be fetched before hand to be sent as a query/data/json argument

You must set the token argument to either ``True`` or ``False`` (**WITHOUT** apostrophes) as such::

    token = False


Captcha
~~~~~~~

Captchas are those annoying "I'm not a robot" boxes that will ask you to solve some shitty puzzle or click on some pictures to access whatever you want to access.

.. thumbnail:: https://b.catgirlsare.sexy/pqER.png
    :align: center
    :alt: Example of a captcha

These are security measures to stop bots from bruteforcing requests. Thankfully though, captcha solving services and software exist to counter that issue.

GiftCarder CA only natively supports Recaptcha through solving services such as 2captcha, Anticaptcha, ImageTyperz as well as captcha solving software such as Capmonster and XEvil. Non Recapctha solving might be achievable through solving software such as Capmonster and XEvil but has not been tested.

You must set the captcha argument to either ``True`` or ``False`` (**WITHOUT** apostrophes) as such::

    captcha = False


Site key
~~~~~~~~

Site keys are what your captcha solving service will use to identify which captcha to solve. They are usually different for each merchant.

How to find the site key
________________________

To find the websites site key, the easiest way to do so is to open the Network console (cf the Method section for instructions) and solve the captcha manually.

You should see a bunch of requests like such:

.. thumbnail:: https://b.catgirlsare.sexy/cpxD.png
    :align: center
    :alt: Example of a captcha request

Now what interestes you here are the **POST** requests to google.com, simply click on one of them and you should see as request url something like::

    https://www.google.com/recaptcha/api2/userverify?k=6LdndBYUAAAAAIE_sQA2y29GSRaKJHKx2DodPT6m

Here the site key is whatever comes after the "?k=" parts. In this case our site key would be ``6LdndBYUAAAAAIE_sQA2y29GSRaKJHKx2DodPT6m``

How to set it in the module
___________________________

Once the site key has been found, you must declare it as such::

    site_key = "6LdndBYUAAAAAIE_sQA2y29GSRaKJHKx2DodPT6m" #MUST BE BETWEEN APOSTROPHES

What if I don't use Captcha?
____________________________

If you set captcha to False, then you must **NOT** remove the site_key argument. You must simply remove whatever is between apostrophes as such::

    site_key = "" #MUST HAVE APOSTROPHES! MUST NOT BE BLANK


Error
~~~~~

GiftCarder CA has an easy and automatic way of handling invalid giftcards, to do so you must simply declare whatever error message the websites returns when a card is invalid

.. thumbnail:: https://b.catgirlsare.sexy/vo6C.png
    :align: center
    :alt: Example of an invalid card number

Using this example you can set the errors as such::

    error = ['Invalid card number']

In this example, GiftCarder CA will scan the response of a request and if it finds the keyword "Invalid card number" anywhere it will count the card as invalid.

The errors are declared as Python lists, and must be put in between [square brackets]. The errors in brackets do not need to contain the full error message, and thus you can use multiple keywords (be careful not to be too broad in case a keyword appears somewhere else in the page source which will lead to false negatives)::

    error = ['Invalid card', 'Invalid', 'Invalid pin', 'Error', 'Invalid Captcha']

**Note: If the website has capctha, it is HIGHLY recommended to set the error for an invalid captcha with the others errors, captcha solving technology is not perfect and timeouts + Invalid solving could lead to false positives** 


Retries
~~~~~~~

If something goes wrong during a request you can set GiftCarder CA to resend the same request in the hopes of a valid response.

Retries does not mean it will retry the request if the website returned a keyword from the error list, but only if the request times out or does not send a valid response

Here you can set the maximum amount of retries (I usually set it to 0)::

    retries = 0 #Max retries limit (Must NOT be in between apostrophes)


Timeout
~~~~~~~

Some requests may sometimes take longer than others, it is important to set up timeout limits to avoid dormant threads and inactive/looping requests that will never end.

You can set the maximum timeout limit in seconds as such::

    timeout = 8 #Max timeout limit in seconds (Must NOT be in between apostrophes)

It is recommended to not put the limit to low either as this may lead to errors and false negatives with slower internet connections


Headers
~~~~~~~

A request header is an HTTP header that can be used in an HTTP request, and that doesn't relate to the content of the message. 
More info here https://developer.mozilla.org/en-US/docs/Glossary/Request_header

While GiftCarder CA does automatically take care of headers, some websites require special headers for the request to go through.

**If you do not wish to set custom headers, simply set the following**::

   headers = None #Custom headers, None will use default

Example of a custom header
__________________________

In the case where you need to set up a special User-Agent or a specific proprietary header (the X-Something headers)::

    headers = {'X-Request-With':'XMLHttpRequest'}

These headers will be added to the already existing default headers, unless they replace one of the default values. (If you set up a custom User-Agent, it'll replace the default User-Agent value)



Generating Area
---------------

Introduction
~~~~~~~~~~~~

Since modules are written in Python, they use Functions which are called "Definitions", these "defs" are functions that the software will run. 
More info here: https://www.tutorialspoint.com/python/python_functions

Code Example
____________

little example code::

        #====================== DEFINITON AREA =====================
        #here's where the definitions are made.
        #There's 5 "default" defs:
        #async def cardcode(): which gives the cardcode generating algorithm
        #async def pincode(): which gives the pincode generating algorithm
        #def request(): Which returns the url
        #async def scrapper(): This is used to scrap the value of the giftcards
        #                Leave it empty to save valid giftcards without their value
        #def settings(): returns the data to send in the GET request


        #====== GENERATING AREA ======
        async def cardcode(cardcode, n): #Code that generates the code
                for x in range(n): #No need to worry about this
                    cardcode += str(randint(0,9)) #here cardcode will be numerical only
                return cardcode

        async def pincode(pincode = ""):  #pattern if there's one, else put ""
                for x in range(4): #length of the pin to be generated (here it's 4)
                    pincode += str(randint(0,9)) #here pin is numerical
                return pincode


The Basics
__________

Each module has 2 "basic" defs that you must use:

- async def cardcode(cardcode, n):

- async def pincode(pincode = ""):


As you might've noticed some functions have the keyword "async" before the "def" one. This simply just state that the function must be run asynchronously. But don't worry about it, all you need to know is that async defs **MUST** have the async tag and non-async defs **MUST NOT** have the async tag.


async def cardcode
~~~~~~~~~~~~~~~~~~

This is the main "cardcode generating algorithm", this is the function that will generate the main card.

The Basics
__________

The def must start with ``async def cardcode(cardcode, n):`` and end with ``return cardcode``

Like so::

    async def cardcode(cardcode, n):
        return cardcode #Be sure to respect the Python indentation

The Generating
______________

To start off with, the ``async def cardcode`` automatically sets a variable called ``cardcode`` which just happens to be the pattern. If you set a valid in the SETUP AREA then carcode will be equal to whatever pattern you put. However if you put valid to ``None`` in the SETUP AREA, then GiftCarder will automatically generate a pattern by taking the valid giftcard provided by the user.

**Example**


Here in this example let's say you set pattern to None or that you want to generate a digital base10 code, you would use the **random** python library to generate code (cf: the Import Area) (don't forget to import it like such ``from random import randint`` and check the docs https://docs.python.org/3/library/random.html)::

    async def cardcode(cardcode, n): #Code that generates the code
            for x in range(n): #no need to worry about this, but you mustn't remove it
                cardcode += str(randint(0,9)) #here it'll generate a random digit from 0 to 9
            return cardcode

Here ``randint(0,9)`` will return a random number between 0 and 9 as an int. Since we want it as an str and not an int, we'll write it as ``str(randint(0,9))``

``for x in range(n):`` means it'll repeat the operation n times, the variable ``n`` is set by the user when they're asked how many digits they want randomized.

``cardcode += str(randint(0,9))`` basically means ``cardcode = cardcode + {a random number between 0 and 9}`` with cardcode being equal to the {valid card - n digits}

Thus::

            for x in range(n):
                cardcode += str(randint(0,9))

means it'll take the valid giftcard code, remove ``n`` digits and then add ``n`` random numbers to it. 

You can then combine this with the "string" library for alphanumerical cardcodes.

.. _pincode-reference-label:

async def pincode
~~~~~~~~~~~~~~~~~

This is the exactly the same thing as ``async def cardcode`` but for pincodes.

The Basics
__________

The def must start with ``async def pincode(pincode = ""):`` and end with ``return pincode``

Like so::

    async def pincode(pincode = ""):
        return pincode #Be sure to respect the Python indentation

The generating
______________

To start off with, the ``async def pincode`` automatically sets a variable called ``pincode``, usually pincodes don't have any patterns and thus we set ``pincode = ""`` in the function. 

If it would happen however the pincode did have a pattern, you could simple set it by doing::

    async def pincode(pincode = "pattern here"):
        return pincode #Be sure to respect the Python indentation



Setting Area
------------

Introduction
~~~~~~~~~~~~

Since modules are written in Python, they use Functions which are called "Definitions", these "defs" are functions that the software will run.
More info here: https://www.tutorialspoint.com/python/python_functions

An Example
__________

simple example::


        #====== SETTINGS AREA ======
        def request(): #URL to send the requests to
                url = "http://example.com/balance"
                return url

        async def scrapper(response): #Code that fetches the value/balance of the card
                value = "$" + response #the response variable is the html source code returned by the request
                return (value)

        def settings(cardcode, pincode, captcha, token): #Data to send at each request. cardcode, pincode, captcha and token are variables that are generated by the software
                data = {'cardNumber':cardcode} #data to send
                return (data)

        #===========================================================

Each module has 3 "basic" defs that are always there:

- def request():

- async def scrapper(response):

- def settings(cardcode, pincode, captcha, token):

These must always be present and must not be remove.

However 5 more "optional" defs exist in case you need to use tokens or cookies

For tokens
__________

- def token_request():

- async def token_scrapper(response):

For cookies
___________

- def cookie_request():

- async def cookie_scrapper(response):

- def cookie_settings(cookie):

As you might've noticed some functions have the keyword "async" before the "def" one. This simply just state that the function must be run asynchronously. But don't worry about it, all you need to know is that async defs **MUST** have the async tag and non-async defs **MUST NOT** have the async tag.


def request()
~~~~~~~~~~~~~

This is will return the url to send the request to.

Finding the url
_______________


The url the request is sent to might not always be the same than the url of the webpage the balance checker is on.

To find what url the request is sent to, you need to open the Network console (cf: the Method section of Setup Area)

Here we can see the Request URL

.. thumbnail:: https://b.catgirlsare.sexy/Q5r4.png
    :align: center
    :alt: Request Url
	
Declaring the url
_________________

Setting up the url is quite straighforward, you just set a variable to the url and return that variable like such::

        def request(): #URL to send the requests to
            url = "http://example.com/balance" #url must be in BETWEEN APOSTROPHES!
            return url #You must not forget to return the url! (and make sure indentation is correct)

Special cases
_____________

To send queries or data through a request, you must declare them in the settings() function, however if it so happens that the request's is **POST while Also** requiring queries, you must set them up directly in the url like such::

        def request(): #URL to send the requests to
            url = "http://example.com/balance?one=true&two=false" #url must be in BETWEEN APOSTROPHES!
            return url #You must not forget to return the url! (and make sure indentation is correct)


async def scrapper()
~~~~~~~~~~~~~~~~~~~~

The scrapper is a very important function of the module, as it is the one that's in charge of fetching whatever balance is on a valid giftcard

You can fetch the balance of a card by analysing the text response a webpage returns when a card is valid and finding where in the source code the value of a card is declared. This can be accomplished in many different ways in Python.

The basics
__________


``async def scrapper(response):`` In here the response object corresponds to the text source code of the response webpage

You can use Python's tools to cut/slice/scrap code and find the cards value, you can also use third party libraries such as BeautifulSoup4 or lxml with XPath and such.

Some Examples
_____________


**Normal HTTP/XML response**

Let's take a simple webpage where a valid giftcard would return this reponse:


.. image:: https://b.catgirlsare.sexy/KlBK.png
    :align: center
    :alt: Example of valid response

Now we must look through the network tool in the response area (cf: Setup Area) and we'll find this:

.. thumbnail:: https://b.catgirlsare.sexy/cDDd.png
    :align: center
    :alt: Example of valid response

So now to properly scrap this we can use the lxml library (https://lxml.de/index.html) by importing it ``from lxml import html`` and use XPath such as such::

    async def scrapper(response): #Code that fetches the value/balance of the card
        tree = html.fromstring(response) #We use the html fromstring attribute
        value = tree.xpath("//*[@id='LBalance']")[0].text.replace('Your balance: ', '') #We're using Xpath args to fetch the balance
        return value
		
Here we are using Xpath to fetch the ``Your balance: $231.08`` code and then by using ``.replace('Your balance ','')`` we're directly setting the value to be returned to be ``$231.08`` without all of that "Your balance" shit.

**JSON response**

Let's take a simple webpage where a valid giftcard would return this response:

.. thumbnail:: https://b.catgirlsare.sexy/xRvm.png
    :align: center
    :alt: Example of valid response

Now we must look through the network tool (cf: Setup Area) and we'll find this:

.. thumbnail:: https://b.catgirlsare.sexy/Knem.png
    :align: center
    :alt: Example of valid response

Now using ujson we can easily parse this response as so::

    async def scrapper(response):
        resp = ujson.loads(str(response))
        value = "$" + str(resp['result']['I2'])
        return (value)

This will return $0.38

**Using XPath, lxml and bs4**

As we saw above with the Html case, we can use the lxml library to easily scrap data with XPath.

If you'd like to have more documentation on XPath, lxml or bs4 you can find some here:

- https://lxml.de/index.html
- https://www.crummy.com/software/BeautifulSoup/bs4/doc/
- https://www.w3schools.com/xml/xml_xpath.asp


def settings
~~~~~~~~~~~~

The settings function returns what you want to send as a query / data / json in your request

The Basics
__________


There is 4 arguments that are passed with the settings section:

- cardcode (the cardcode)
- pincode (the pincode)
- captcha (the captcha solution key)
- token (the token(s))

it is syntaxed as such::

    def settings(cardcode, pincode, captcha, token): #Data to send at each request
        data = {'Check':'true','authenticityToken':token, 'number':cardcode, 'g-recaptcha-response':captcha} #example data to send
        return (data) #don't forget to return it

As you can see that data must be formatted with brackets as such: ``{'argument':'value', 'argument2':'value'}``

How to find the data/params
___________________________

Finding what data is supposed to be sent is easy, to do so simply use the network console (cf: the Method section in Setup Area) and click the Params tab

.. thumbnail:: https://b.catgirlsare.sexy/wnZM.png
    :align: center
    :alt: Params tab

Here this data would give use this::

    def settings(cardcode, pincode, captcha, token): #Data to send at each request
        data = {'campanyId':'bbp01', 'pageMode':'0', 'loginAttempts':'0', 'enteredCardNumber':'0000000000'} #data to send
        return (data)

Special cases
_____________

**When using Tokens**

See the Tokens section

**The empty data case**

When you have an empty like such:

.. thumbnail:: https://b.catgirlsare.sexy/p3yv.png
    :align: center
    :alt: Empty arg

You format your data as such::

    data = {'name':'GiftCarder', 'emptyarg':'', 'Pin':pincode, 'enteredCardNumber':cardcode}


The Token case
~~~~~~~~~~~~~~

Tokens are usually small strings hidden a webpage's source to identify the validity of a request.

If the website you're trying to brute uses token, you must add a few functions to your module. First you need to set ``token = True`` in the Setup Area

Then you must add these 2 Functions:

- def token_request():

- async def token_scrapper(response):

def token_request
_________________

This works exactly like ``def request():`` does. Tokens aren't always hidden in the same webpage of the request.

A such you must declare what url the bot will fetch the source code from::

    def token_request():
        url = 'https://example.com/page'
        return url

async def token_scrapper(response)
__________________________________

Now this is the same thing as the ``async def scrapper(response)`` function. Except that instead of scrapping a card's value, we're scrapping a (or multiple) token's value.

This function works the same as the scrapper one like this::

    async def token_scrapper(response): #The response object is the source code of the url you specified earlier
        tree = html.fromstring(response)
        token = tree.xpath('//*[@name="OWASP_CSRFTOKEN"]/@value')[0] #little example using the lxml library and XPath
        return token

Multiple tokens case
____________________

In the case the website you're making a module for requires more than one token hidden in the source code, you must bundle your tokens together in square brackets to make a python list

Like this::

    async def token_scrapper(response): #The response object is the source code of the url you specified earlier
        tree = html.fromstring(response)
        token_one = tree.xpath('//*[@name="OWASP_CSRFTOKEN"]/@value')[0] #little example using the lxml library and XPath
        token_two = tree.xpath('//*[@name="XKCD_CSRFTOKEN"]/@value')[0]
        return [token_one, token_two] #this will return both tokens as a list

Using them in the settings function
___________________________________

Now once you've specified the url to fetch the tokens, and scrapped them, it is now time to use them in your request. 

You'll notice you have a ``token`` argument already present in the settings function, this is equal to what the ``token_scrapper(response)`` function returned.

To use them, do like so::

    def settings(cardcode, pincode, captcha, token): #Data to send at each request
        data = {'campanyId':'bbp01', 'pageMode':'0', 'TOKEN':token, 'enteredCardNumber':'0000000000'} #data to send
        return (data)

Now if you have returned a list of multiple tokens, you can set them up likes this::

    def settings(cardcode, pincode, captcha, token): #Data to send at each request
        data = {'campanyId':'bbp01', 'pageMode':'0', 'TOKEN1':token[0], 'TOKEN2':token[1], 'TOKEN3':token[2], 'enteredCardNumber':'0000000000'} #data to send
        return (data)

As you can see in this example, we add a number between square brackets to specify which element of a list we want. Here's an example:

Let's say we have a token_scrapper function like so::

    async def token_scrapper(response): #The response object is the source code of the url you specified earlier
        token_one = "Bot"
        token_two = "Beater"
        return [token_one, token_two] #this will return both tokens as a list

Well in this case, specifying ``token[0]`` in the settings function will return "Bot" and specifying ``token[1]`` will return "Beater"


The Cookie case
~~~~~~~~~~~~~~~

Cookies are small strings of text that are sent during a request to send information on the user. Sometimes these cookies are used as identifiers to verify the validity of a request

If the website you're trying to brute uses cookies, you must add a few functions to your module. First you need to set ``cookie = True`` in the Setup Area

Then you must add these 3 Functions:

- def cookie_request():

- async def cookie_scrapper(response):

- def cookie_settings():

def cookie_request
__________________

This works exactly like ``def request():`` and ``def token_request()``.

A such you must declare what url the bot will fetch the cookies from::

    def cookie_request():
        url = 'https://example.com/page'
        return url

async def cookie_scrapper(response)
___________________________________

This function will work a little differently than the normal scrapper function or the token scrapper.

Here the software will return a dict list of all the cookies it received when sending a request to url that was set in cookie_request() (here it's ``https://example.com/page``)

Each cookie in the list has multiple variables:

	- version (the cookie version)
	- name (the name of the cookie)
	- value (the cookie's value)
	- port
	- port_specified 
	- domain
	- domain_specified
	- domain_initial_dot
	- path
	- path_specified
	- secure
	- expires (UNIX timestamp of when the cookie expires)
	- discard
	- comment
	- comment_url
	- rest
	- rfc2109
	
But the only ones we'll really need are the `name`, `value`and maybe `expires` variables.

From there we can scrap the cookie values by name like so::

    async def cookie_scrapper(response):
		nid_cookie = "null"
		jar_cookie = "null"
        for cookie in r.cookies: #will go through each and all cookies of the r.cookies list
			if cookie.name == "NID": #If one of the cookie's name is "NID"
				nid_cookie = cookie.value #Then set the value of nid_cookie to that cookie's value
			elif cookie.name == "1P_JAR":
				jar_cookie = cookie.value
				
		return [nid_cookie, jar_cookie]

def cookie_settings(cookies)
____________________________

This is where we'll declare the cookies to be passed during the request, like so::

	def cookie_settings(cookies):
		settings = {'NID':cookie[0], '1P_JAR':cookie[1]}
		return settings